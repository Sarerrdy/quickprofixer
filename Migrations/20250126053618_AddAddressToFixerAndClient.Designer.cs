// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuickProFixer.Data;

#nullable disable

namespace quickprofixer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250126053618_AddAddressToFixerAndClient")]
    partial class AddAddressToFixerAndClient
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("QuickProFixer.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LGA")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Landmark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressLine = "123 Main St",
                            Country = "Nigeria",
                            LGA = "Portharcourt",
                            State = "Rivers",
                            Town = "Portharcourt"
                        },
                        new
                        {
                            Id = 2,
                            AddressLine = "456 Elm St",
                            Country = "Nigeria",
                            LGA = "Portharcourt",
                            State = "Rivers",
                            Town = "Portharcourt"
                        },
                        new
                        {
                            Id = 3,
                            AddressLine = "789 Pine St",
                            Country = "Nigeria",
                            LGA = "Portharcourt",
                            State = "Rivers",
                            Town = "Portharcourt"
                        },
                        new
                        {
                            Id = 4,
                            AddressLine = "101 Maple St",
                            Country = "Nigeria",
                            LGA = "Eleme",
                            State = "Rivers",
                            Town = "Eleme"
                        },
                        new
                        {
                            Id = 5,
                            AddressLine = "202 Oak St",
                            Country = "Nigeria",
                            LGA = "Eleme",
                            State = "Rivers",
                            Town = "Eleme"
                        },
                        new
                        {
                            Id = 6,
                            AddressLine = "303 Birch St",
                            Country = "Nigeria",
                            LGA = "Portharcourt",
                            State = "Portharcourt",
                            Town = "Eleme"
                        },
                        new
                        {
                            Id = 7,
                            AddressLine = "404 Cedar St",
                            Country = "Nigeria",
                            LGA = "Eleme",
                            State = "Eleme",
                            Town = "Portharcourt"
                        });
                });

            modelBuilder.Entity("QuickProFixer.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("QuickProFixer.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FixerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("QuoteId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("FixerId");

                    b.HasIndex("QuoteId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("QuickProFixer.Models.ClientRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FixerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Review")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("FixerId");

                    b.ToTable("ClientRatings");
                });

            modelBuilder.Entity("QuickProFixer.Models.FixRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FixerId")
                        .HasColumnType("nvarchar(450)");

                    b.PrimitiveCollection<string>("FixerIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PreferredSchedule")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequiredSkills")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupportingDocumentId")
                        .HasColumnType("int");

                    b.PrimitiveCollection<string>("SupportingFiles")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupportingImageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("FixerId");

                    b.HasIndex("SupportingDocumentId");

                    b.HasIndex("SupportingImageId");

                    b.ToTable("FixRequests");
                });

            modelBuilder.Entity("QuickProFixer.Models.FixerRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FixerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Review")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("FixerId");

                    b.ToTable("FixerRatings");
                });

            modelBuilder.Entity("QuickProFixer.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FixerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("ClientId");

                    b.HasIndex("FixerId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("QuickProFixer.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClientPaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FixerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FixerPaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("ClientId");

                    b.HasIndex("FixerId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("QuickProFixer.Models.Quote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FixRequestId")
                        .HasColumnType("int");

                    b.Property<string>("FixerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("SupportingDocumentId")
                        .HasColumnType("int");

                    b.PrimitiveCollection<string>("SupportingFiles")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupportingImageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("FixRequestId");

                    b.HasIndex("FixerId");

                    b.HasIndex("SupportingDocumentId");

                    b.HasIndex("SupportingImageId");

                    b.ToTable("Quotes");
                });

            modelBuilder.Entity("QuickProFixer.Models.QuoteItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("QuoteId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("QuoteId");

                    b.ToTable("QuoteItems");
                });

            modelBuilder.Entity("QuickProFixer.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Plumbing"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Electricals"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Masonry"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Tiling"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Screeding"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Painting"
                        });
                });

            modelBuilder.Entity("QuickProFixer.Models.SupportingFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SupportingFiles");
                });

            modelBuilder.Entity("QuickProFixer.Models.Client", b =>
                {
                    b.HasBaseType("QuickProFixer.Models.ApplicationUser");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("CurrentRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerificationDocument")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("AddressId");

                    b.ToTable("Clients", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "client1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "da89457d-074e-4110-85c7-09dd636bb4ba",
                            Email = "john.doe@example.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            MiddleName = "",
                            NormalizedEmail = "JOHN.DOE@EXAMPLE.COM",
                            NormalizedUserName = "JOHN.DOE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKojkkZjWlH/ue9BKBiAz16p1f+qYNt+guRfOjrkgM5pamm4L3ilNNDIthT2TotxGg==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "aa6e1674-3721-4247-854e-9dd02136f000",
                            TwoFactorEnabled = false,
                            UserName = "john.doe@example.com",
                            AddressId = 1,
                            CurrentRole = "Client",
                            ImgUrl = "",
                            IsVerified = true,
                            Location = "Eleme",
                            VerificationDocument = "doc1.pdf"
                        },
                        new
                        {
                            Id = "client2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b5f9895e-be91-485b-b587-bd5c85490654",
                            Email = "jane.doe@example.com",
                            EmailConfirmed = true,
                            FirstName = "Jane",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            MiddleName = "",
                            NormalizedEmail = "JANE.DOE@EXAMPLE.COM",
                            NormalizedUserName = "JANE.DOE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJvTthhIow1kNvJ6CH3Ry9KzLYJeTrDRRf2Pi6n0Qjh3ozjxRqA+kRVzq4IfztdULQ==",
                            PhoneNumber = "0987654321",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "ea2728ad-0209-45f3-91f3-c8cac230bf97",
                            TwoFactorEnabled = false,
                            UserName = "jane.doe@example.com",
                            AddressId = 2,
                            CurrentRole = "Client",
                            ImgUrl = "",
                            IsVerified = true,
                            Location = "Portharcourt",
                            VerificationDocument = "doc2.pdf"
                        });
                });

            modelBuilder.Entity("QuickProFixer.Models.Fixer", b =>
                {
                    b.HasBaseType("QuickProFixer.Models.ApplicationUser");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Certifications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExperienceYears")
                        .HasColumnType("int");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Portfolio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RateType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("Reviews")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("int");

                    b.Property<string>("VerificationDocument")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("AddressId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("Fixers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fixer1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fe63333b-d27b-4ada-ba27-74276a2d9832",
                            Email = "alice.smith@example.com",
                            EmailConfirmed = true,
                            FirstName = "Alice",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            MiddleName = "",
                            NormalizedEmail = "ALICE.SMITH@EXAMPLE.COM",
                            NormalizedUserName = "ALICE.SMITH@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBydoo1JpyTANMuGEFXnPUIi6D/dfbjL90BaEoEv7ugMwoYAhtpL39yO1NUNVzalGw==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "2f27a819-1680-4b4d-810e-74cc7f94a5fa",
                            TwoFactorEnabled = false,
                            UserName = "alice.smith@example.com",
                            AddressId = 3,
                            Certifications = "Certified Electrician",
                            CurrentRole = "Fixer",
                            ExperienceYears = 5,
                            ImgUrl = "",
                            IsAvailable = true,
                            IsVerified = true,
                            Location = "Portharcourt",
                            Portfolio = "portfolio1.pdf",
                            Rate = 40.0m,
                            RateType = "Per Hour",
                            Rating = 4.7999999999999998,
                            Reviews = "Great work",
                            SpecializationId = 2,
                            VerificationDocument = "doc3.pdf"
                        },
                        new
                        {
                            Id = "fixer2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f3c9a618-9f04-4e0c-8f64-73722012daf3",
                            Email = "bob.johnson@example.com",
                            EmailConfirmed = true,
                            FirstName = "Bob",
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            MiddleName = "",
                            NormalizedEmail = "BOB.JOHNSON@EXAMPLE.COM",
                            NormalizedUserName = "BOB.JOHNSON@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEG0/P/6Pe13LkiFNWdC8yixvHkWLwlMzFIPabL6miBdVNNw67/o94MXISEm0c8aZbg==",
                            PhoneNumber = "2345678901",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "883f303d-2dd7-4972-97d8-4a3b49805956",
                            TwoFactorEnabled = false,
                            UserName = "bob.johnson@example.com",
                            AddressId = 4,
                            Certifications = "Certified Plumber",
                            CurrentRole = "Fixer",
                            ExperienceYears = 10,
                            ImgUrl = "",
                            IsAvailable = true,
                            IsVerified = true,
                            Location = "Portharcourt",
                            Portfolio = "portfolio2.pdf",
                            Rate = 50.0m,
                            RateType = "Per Hour",
                            Rating = 4.5,
                            Reviews = "Excellent service",
                            SpecializationId = 1,
                            VerificationDocument = "doc4.pdf"
                        },
                        new
                        {
                            Id = "fixer3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cbc140c0-b3a2-4b70-a18c-b3d24e24c132",
                            Email = "charlie.brown@example.com",
                            EmailConfirmed = true,
                            FirstName = "Charlie",
                            LastName = "Brown",
                            LockoutEnabled = false,
                            MiddleName = "",
                            NormalizedEmail = "CHARLIE.BROWN@EXAMPLE.COM",
                            NormalizedUserName = "CHARLIE.BROWN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJkVjGyr3zIqPWW1O0S6xcGdZKUcseimZAFGG+POIgmMHqOL2UpnZw5cxlFgKwsXaQ==",
                            PhoneNumber = "3456789012",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "83bd12a1-9283-4dfc-ae97-6f5ec6ef2b5f",
                            TwoFactorEnabled = false,
                            UserName = "charlie.brown@example.com",
                            AddressId = 5,
                            Certifications = "Certified Mason",
                            CurrentRole = "Fixer",
                            ExperienceYears = 8,
                            ImgUrl = "",
                            IsAvailable = true,
                            IsVerified = true,
                            Location = "Portharcourt",
                            Portfolio = "portfolio3.pdf",
                            Rate = 45.0m,
                            RateType = "Per Hour",
                            Rating = 4.7000000000000002,
                            Reviews = "Highly skilled",
                            SpecializationId = 3,
                            VerificationDocument = "doc5.pdf"
                        },
                        new
                        {
                            Id = "fixer4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8d6bf09e-1d84-4f2e-b01f-45be11e0eb39",
                            Email = "david.williams@example.com",
                            EmailConfirmed = true,
                            FirstName = "David",
                            LastName = "Williams",
                            LockoutEnabled = false,
                            MiddleName = "",
                            NormalizedEmail = "DAVID.WILLIAMS@EXAMPLE.COM",
                            NormalizedUserName = "DAVID.WILLIAMS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPaOQx6jYwq48dmM6yoD2b0KxvvLhyx+IdkCqdwGRo6iXLjfNygaJyh4Nc7DswdxdQ==",
                            PhoneNumber = "4567890123",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "e578df13-a392-4918-b7eb-07a7cc4a148e",
                            TwoFactorEnabled = false,
                            UserName = "david.williams@example.com",
                            AddressId = 6,
                            Certifications = "Certified Tiler",
                            CurrentRole = "Fixer",
                            ExperienceYears = 6,
                            ImgUrl = "",
                            IsAvailable = true,
                            IsVerified = true,
                            Location = "Eleme",
                            Portfolio = "portfolio4.pdf",
                            Rate = 42.0m,
                            RateType = "Per Hour",
                            Rating = 4.5999999999999996,
                            Reviews = "Excellent tiling",
                            SpecializationId = 4,
                            VerificationDocument = "doc6.pdf"
                        },
                        new
                        {
                            Id = "fixer5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bb51cff6-56af-4e37-9034-935e0d5638a6",
                            Email = "eve.davis@example.com",
                            EmailConfirmed = true,
                            FirstName = "Eve",
                            LastName = "Davis",
                            LockoutEnabled = false,
                            MiddleName = "",
                            NormalizedEmail = "EVE.DAVIS@EXAMPLE.COM",
                            NormalizedUserName = "EVE.DAVIS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOYz6lWDQwmQtxeIVrQDkuzK8dmZeUcDHo41WITHvZkLbmo91vD3XJtX+Qq0PJH/eg==",
                            PhoneNumber = "5678901234",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "b70b782b-0913-444e-a486-2b3afa87dda7",
                            TwoFactorEnabled = false,
                            UserName = "eve.davis@example.com",
                            AddressId = 7,
                            Certifications = "Certified Screeder",
                            CurrentRole = "Fixer",
                            ExperienceYears = 7,
                            ImgUrl = "",
                            IsAvailable = true,
                            IsVerified = true,
                            Location = "Eleme",
                            Portfolio = "portfolio5.pdf",
                            Rate = 48.0m,
                            RateType = "Per Hour",
                            Rating = 4.9000000000000004,
                            Reviews = "Top-notch screeding",
                            SpecializationId = 5,
                            VerificationDocument = "doc7.pdf"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("QuickProFixer.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("QuickProFixer.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuickProFixer.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("QuickProFixer.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuickProFixer.Models.Booking", b =>
                {
                    b.HasOne("QuickProFixer.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickProFixer.Models.Fixer", "Fixer")
                        .WithMany()
                        .HasForeignKey("FixerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickProFixer.Models.Quote", "Quote")
                        .WithMany()
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Fixer");

                    b.Navigation("Quote");
                });

            modelBuilder.Entity("QuickProFixer.Models.ClientRating", b =>
                {
                    b.HasOne("QuickProFixer.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuickProFixer.Models.Fixer", "Fixer")
                        .WithMany("ClientRatings")
                        .HasForeignKey("FixerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Fixer");
                });

            modelBuilder.Entity("QuickProFixer.Models.FixRequest", b =>
                {
                    b.HasOne("QuickProFixer.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickProFixer.Models.Fixer", "Fixer")
                        .WithMany()
                        .HasForeignKey("FixerId");

                    b.HasOne("QuickProFixer.Models.SupportingFile", "SupportingDocument")
                        .WithMany()
                        .HasForeignKey("SupportingDocumentId");

                    b.HasOne("QuickProFixer.Models.SupportingFile", "SupportingImage")
                        .WithMany()
                        .HasForeignKey("SupportingImageId");

                    b.Navigation("Address");

                    b.Navigation("Fixer");

                    b.Navigation("SupportingDocument");

                    b.Navigation("SupportingImage");
                });

            modelBuilder.Entity("QuickProFixer.Models.FixerRating", b =>
                {
                    b.HasOne("QuickProFixer.Models.Client", "Client")
                        .WithMany("FixerRatings")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickProFixer.Models.Fixer", "Fixer")
                        .WithMany()
                        .HasForeignKey("FixerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Fixer");
                });

            modelBuilder.Entity("QuickProFixer.Models.Invoice", b =>
                {
                    b.HasOne("QuickProFixer.Models.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuickProFixer.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickProFixer.Models.Fixer", "Fixer")
                        .WithMany()
                        .HasForeignKey("FixerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Client");

                    b.Navigation("Fixer");
                });

            modelBuilder.Entity("QuickProFixer.Models.Payment", b =>
                {
                    b.HasOne("QuickProFixer.Models.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuickProFixer.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickProFixer.Models.Fixer", "Fixer")
                        .WithMany()
                        .HasForeignKey("FixerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Client");

                    b.Navigation("Fixer");
                });

            modelBuilder.Entity("QuickProFixer.Models.Quote", b =>
                {
                    b.HasOne("QuickProFixer.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickProFixer.Models.FixRequest", "FixRequest")
                        .WithMany()
                        .HasForeignKey("FixRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuickProFixer.Models.Fixer", "Fixer")
                        .WithMany()
                        .HasForeignKey("FixerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickProFixer.Models.SupportingFile", "SupportingDocument")
                        .WithMany()
                        .HasForeignKey("SupportingDocumentId");

                    b.HasOne("QuickProFixer.Models.SupportingFile", "SupportingImage")
                        .WithMany()
                        .HasForeignKey("SupportingImageId");

                    b.Navigation("Client");

                    b.Navigation("FixRequest");

                    b.Navigation("Fixer");

                    b.Navigation("SupportingDocument");

                    b.Navigation("SupportingImage");
                });

            modelBuilder.Entity("QuickProFixer.Models.QuoteItem", b =>
                {
                    b.HasOne("QuickProFixer.Models.Quote", "Quote")
                        .WithMany("Items")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quote");
                });

            modelBuilder.Entity("QuickProFixer.Models.Client", b =>
                {
                    b.HasOne("QuickProFixer.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickProFixer.Models.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("QuickProFixer.Models.Client", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("QuickProFixer.Models.Fixer", b =>
                {
                    b.HasOne("QuickProFixer.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickProFixer.Models.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("QuickProFixer.Models.Fixer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuickProFixer.Models.Service", "Specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("QuickProFixer.Models.Quote", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("QuickProFixer.Models.Client", b =>
                {
                    b.Navigation("FixerRatings");
                });

            modelBuilder.Entity("QuickProFixer.Models.Fixer", b =>
                {
                    b.Navigation("ClientRatings");
                });
#pragma warning restore 612, 618
        }
    }
}
