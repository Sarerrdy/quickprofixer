// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuickProFixer.Data;

#nullable disable

namespace quickprofixer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250527133355_AddMoreFixersSeed")]
    partial class AddMoreFixersSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("QuickProFixer.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LGA")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Landmark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressLine = "123 Main St",
                            Country = "Nigeria",
                            LGA = "Portharcourt",
                            State = "Rivers",
                            Town = "Portharcourt"
                        },
                        new
                        {
                            Id = 2,
                            AddressLine = "456 Elm St",
                            Country = "Nigeria",
                            LGA = "Portharcourt",
                            State = "Rivers",
                            Town = "Portharcourt"
                        },
                        new
                        {
                            Id = 3,
                            AddressLine = "789 Pine St",
                            Country = "Nigeria",
                            LGA = "Portharcourt",
                            State = "Rivers",
                            Town = "Portharcourt"
                        },
                        new
                        {
                            Id = 4,
                            AddressLine = "101 Maple St",
                            Country = "Nigeria",
                            LGA = "Eleme",
                            State = "Rivers",
                            Town = "Eleme"
                        },
                        new
                        {
                            Id = 5,
                            AddressLine = "202 Oak St",
                            Country = "Nigeria",
                            LGA = "Eleme",
                            State = "Rivers",
                            Town = "Eleme"
                        },
                        new
                        {
                            Id = 6,
                            AddressLine = "303 Birch St",
                            Country = "Nigeria",
                            LGA = "Eleme",
                            State = "Rivers",
                            Town = "Eleme"
                        },
                        new
                        {
                            Id = 7,
                            AddressLine = "404 Cedar St",
                            Country = "Nigeria",
                            LGA = "Portharcourt",
                            State = "Rivers",
                            Town = "Portharcourt"
                        });
                });

            modelBuilder.Entity("QuickProFixer.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("QuickProFixer.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FixerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("QuoteId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("FixerId");

                    b.HasIndex("QuoteId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("QuickProFixer.Models.ClientRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FixerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Review")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("FixerId");

                    b.ToTable("ClientRatings");
                });

            modelBuilder.Entity("QuickProFixer.Models.FixRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FixerId")
                        .HasColumnType("nvarchar(450)");

                    b.PrimitiveCollection<string>("FixerIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PreferredSchedule")
                        .HasColumnType("datetime2");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupportingDocumentId")
                        .HasColumnType("int");

                    b.PrimitiveCollection<string>("SupportingFiles")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupportingImageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("FixerId");

                    b.HasIndex("SpecializationId");

                    b.HasIndex("SupportingDocumentId");

                    b.HasIndex("SupportingImageId");

                    b.ToTable("FixRequests");
                });

            modelBuilder.Entity("QuickProFixer.Models.FixerRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FixerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Review")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("FixerId");

                    b.ToTable("FixerRatings");
                });

            modelBuilder.Entity("QuickProFixer.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FixerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("ClientId");

                    b.HasIndex("FixerId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("QuickProFixer.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClientPaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FixerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FixerPaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("ClientId");

                    b.HasIndex("FixerId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("QuickProFixer.Models.Quote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FixRequestId")
                        .HasColumnType("int");

                    b.Property<string>("FixerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("SupportingDocumentId")
                        .HasColumnType("int");

                    b.PrimitiveCollection<string>("SupportingFiles")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupportingImageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("FixRequestId");

                    b.HasIndex("FixerId");

                    b.HasIndex("SupportingDocumentId");

                    b.HasIndex("SupportingImageId");

                    b.ToTable("Quotes");
                });

            modelBuilder.Entity("QuickProFixer.Models.QuoteItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("QuoteId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("QuoteId");

                    b.ToTable("QuoteItems");
                });

            modelBuilder.Entity("QuickProFixer.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Plumbing"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Electricals"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Masonry"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Tiling"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Screeding"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Painting"
                        });
                });

            modelBuilder.Entity("QuickProFixer.Models.SupportingFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SupportingFiles");
                });

            modelBuilder.Entity("QuickProFixer.Models.Client", b =>
                {
                    b.HasBaseType("QuickProFixer.Models.ApplicationUser");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("CurrentRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerificationDocument")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("AddressId");

                    b.ToTable("Clients", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "client1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d089b4c7-8660-4b05-a0fc-a02b18f6be47",
                            Email = "john.doe@example.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            MiddleName = "",
                            NormalizedEmail = "JOHN.DOE@EXAMPLE.COM",
                            NormalizedUserName = "JOHN.DOE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHbIVIqVt6y3s8gbuJ2XNCuUqUh3Sfw/g9KoFYSEWPFV/yGdIVC1iAm9GYaopd8A8g==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "9988c775-e019-4590-9d99-af259b621848",
                            TwoFactorEnabled = false,
                            UserName = "john.doe@example.com",
                            AddressId = 6,
                            CurrentRole = "Client",
                            ImgUrl = "",
                            IsVerified = true,
                            Location = "Eleme",
                            VerificationDocument = "doc1.pdf"
                        },
                        new
                        {
                            Id = "client2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3c4886e0-4982-4811-971e-16b5f67cff67",
                            Email = "jane.doe@example.com",
                            EmailConfirmed = true,
                            FirstName = "Jane",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            MiddleName = "",
                            NormalizedEmail = "JANE.DOE@EXAMPLE.COM",
                            NormalizedUserName = "JANE.DOE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEE+PLrzKLKja/rniXprut6EMuBli4xLjclzPavxrWhr2giXaJJfvgy+20W63zVVpvQ==",
                            PhoneNumber = "0987654321",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "b5683447-b595-46b3-847b-b52e06e1c5f9",
                            TwoFactorEnabled = false,
                            UserName = "jane.doe@example.com",
                            AddressId = 7,
                            CurrentRole = "Client",
                            ImgUrl = "",
                            IsVerified = true,
                            Location = "Portharcourt",
                            VerificationDocument = "doc2.pdf"
                        });
                });

            modelBuilder.Entity("QuickProFixer.Models.Fixer", b =>
                {
                    b.HasBaseType("QuickProFixer.Models.ApplicationUser");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Certifications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExperienceYears")
                        .HasColumnType("int");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Portfolio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RateType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("Reviews")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("int");

                    b.Property<string>("VerificationDocument")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("AddressId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("Fixers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fixer1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ad8346d7-d5fe-4fde-80b6-9ab9a130c0d9",
                            Email = "alice.smith@example.com",
                            EmailConfirmed = true,
                            FirstName = "Alice",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            MiddleName = "",
                            NormalizedEmail = "ALICE.SMITH@EXAMPLE.COM",
                            NormalizedUserName = "ALICE.SMITH@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEA9s5hQPgU1gDRZDJfoEjzFm7xJvy0G2oj3lZ2IX8ZeLjJVXwJqABHWFUwUTvvgp7A==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "e61cc05a-7518-4c56-a01c-de9709a6c729",
                            TwoFactorEnabled = false,
                            UserName = "alice.smith@example.com",
                            AddressId = 1,
                            Certifications = "Certified Electrician",
                            CurrentRole = "Fixer",
                            ExperienceYears = 5,
                            ImgUrl = "",
                            IsAvailable = true,
                            IsVerified = true,
                            Location = "Portharcourt",
                            Portfolio = "portfolio1.pdf",
                            Rate = 40.0m,
                            RateType = "Per Hour",
                            Rating = 4.7999999999999998,
                            Reviews = "Great work",
                            SpecializationId = 2,
                            VerificationDocument = "doc3.pdf"
                        },
                        new
                        {
                            Id = "fixer2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fc2a039b-b6d7-483a-a229-46ce21cba634",
                            Email = "bob.johnson@example.com",
                            EmailConfirmed = true,
                            FirstName = "Bob",
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            MiddleName = "",
                            NormalizedEmail = "BOB.JOHNSON@EXAMPLE.COM",
                            NormalizedUserName = "BOB.JOHNSON@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEP3r7l1PAjXrnQtyWjgxGxD3OjkzaonRGCpdXkYSTEktZ3M05Po8nAY9dLqrqAo06Q==",
                            PhoneNumber = "2345678901",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "e9c71101-2fb7-4d5e-8b4a-e23b06b09ce0",
                            TwoFactorEnabled = false,
                            UserName = "bob.johnson@example.com",
                            AddressId = 2,
                            Certifications = "Certified Plumber",
                            CurrentRole = "Fixer",
                            ExperienceYears = 10,
                            ImgUrl = "",
                            IsAvailable = true,
                            IsVerified = true,
                            Location = "Portharcourt",
                            Portfolio = "portfolio2.pdf",
                            Rate = 50.0m,
                            RateType = "Per Hour",
                            Rating = 4.5,
                            Reviews = "Excellent service",
                            SpecializationId = 1,
                            VerificationDocument = "doc4.pdf"
                        },
                        new
                        {
                            Id = "fixer3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "143ea4af-1fc8-4b2f-a695-f41ed8f44128",
                            Email = "charlie.brown@example.com",
                            EmailConfirmed = true,
                            FirstName = "Charlie",
                            LastName = "Brown",
                            LockoutEnabled = false,
                            MiddleName = "",
                            NormalizedEmail = "CHARLIE.BROWN@EXAMPLE.COM",
                            NormalizedUserName = "CHARLIE.BROWN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBqHlBQx+GYuo9EJn8jYJWlPGS2dw6+ahgnBd3xuQaWB5Exn9+yiZUr1AOazrIKvPQ==",
                            PhoneNumber = "3456789012",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "a2e9f73d-c34a-4bf7-b99a-b3f21ba711f7",
                            TwoFactorEnabled = false,
                            UserName = "charlie.brown@example.com",
                            AddressId = 3,
                            Certifications = "Certified Mason",
                            CurrentRole = "Fixer",
                            ExperienceYears = 8,
                            ImgUrl = "",
                            IsAvailable = true,
                            IsVerified = true,
                            Location = "Portharcourt",
                            Portfolio = "portfolio3.pdf",
                            Rate = 45.0m,
                            RateType = "Per Hour",
                            Rating = 4.7000000000000002,
                            Reviews = "Highly skilled",
                            SpecializationId = 3,
                            VerificationDocument = "doc5.pdf"
                        },
                        new
                        {
                            Id = "fixer4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "757f3705-fb08-433b-9b91-b9d05bd85491",
                            Email = "david.williams@example.com",
                            EmailConfirmed = true,
                            FirstName = "David",
                            LastName = "Williams",
                            LockoutEnabled = false,
                            MiddleName = "",
                            NormalizedEmail = "DAVID.WILLIAMS@EXAMPLE.COM",
                            NormalizedUserName = "DAVID.WILLIAMS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAxaaaptHOCS1Zn/kv64Uc8mUs7Y1blEwPEM5F4JgtmeBwMQeEBAO637C7JkIDy9nQ==",
                            PhoneNumber = "4567890123",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "05b54de4-c4e2-46d6-a363-89c1349b9712",
                            TwoFactorEnabled = false,
                            UserName = "david.williams@example.com",
                            AddressId = 4,
                            Certifications = "Certified Tiler",
                            CurrentRole = "Fixer",
                            ExperienceYears = 6,
                            ImgUrl = "",
                            IsAvailable = true,
                            IsVerified = true,
                            Location = "Eleme",
                            Portfolio = "portfolio4.pdf",
                            Rate = 42.0m,
                            RateType = "Per Hour",
                            Rating = 4.5999999999999996,
                            Reviews = "Excellent tiling",
                            SpecializationId = 4,
                            VerificationDocument = "doc6.pdf"
                        },
                        new
                        {
                            Id = "fixer5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d058cadc-ed22-4016-9c3a-42b174927198",
                            Email = "eve.davis@example.com",
                            EmailConfirmed = true,
                            FirstName = "Eve",
                            LastName = "Davis",
                            LockoutEnabled = false,
                            MiddleName = "",
                            NormalizedEmail = "EVE.DAVIS@EXAMPLE.COM",
                            NormalizedUserName = "EVE.DAVIS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEI/ky+yhdv29AC9t/tn34Wj2eThs9PlpfL9aScvfqASU2QbfKQoLEc+/2zmj+TQmzw==",
                            PhoneNumber = "5678901234",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "c4957d0b-25dd-428a-b09a-01e6012f900b",
                            TwoFactorEnabled = false,
                            UserName = "eve.davis@example.com",
                            AddressId = 5,
                            Certifications = "Certified Screeder",
                            CurrentRole = "Fixer",
                            ExperienceYears = 7,
                            ImgUrl = "",
                            IsAvailable = true,
                            IsVerified = true,
                            Location = "Eleme",
                            Portfolio = "portfolio5.pdf",
                            Rate = 48.0m,
                            RateType = "Per Hour",
                            Rating = 4.9000000000000004,
                            Reviews = "Top-notch screeding",
                            SpecializationId = 5,
                            VerificationDocument = "doc7.pdf"
                        },
                        new
                        {
                            Id = "fixer6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2747fa15-5479-4a03-a8e7-e0e543f48fe7",
                            Email = "frank.edwards@example.com",
                            EmailConfirmed = true,
                            FirstName = "Frank",
                            LastName = "Edwards",
                            LockoutEnabled = false,
                            MiddleName = "",
                            NormalizedEmail = "FRANK.EDWARDS@EXAMPLE.COM",
                            NormalizedUserName = "FRANK.EDWARDS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELMj8yq0dQRAmFCgK0KW/UYuogtT+X8054zAMDu7C21XdsJdsSUEIO4jQac7uev4Ow==",
                            PhoneNumber = "6789012345",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "5d9940d2-85aa-4a4f-be76-14c291b4b71d",
                            TwoFactorEnabled = false,
                            UserName = "frank.edwards@example.com",
                            AddressId = 2,
                            Certifications = "Licensed Electrician",
                            CurrentRole = "Fixer",
                            ExperienceYears = 6,
                            ImgUrl = "",
                            IsAvailable = true,
                            IsVerified = true,
                            Location = "Portharcourt",
                            Portfolio = "portfolio6.pdf",
                            Rate = 43.0m,
                            RateType = "Per Hour",
                            Rating = 4.8499999999999996,
                            Reviews = "Very reliable and professional",
                            SpecializationId = 2,
                            VerificationDocument = "doc8.pdf"
                        },
                        new
                        {
                            Id = "fixer7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "973e8613-f050-4c12-8285-3a7fbc03872c",
                            Email = "grace.ike@example.com",
                            EmailConfirmed = true,
                            FirstName = "Grace",
                            LastName = "Ike",
                            LockoutEnabled = false,
                            MiddleName = "",
                            NormalizedEmail = "GRACE.IKE@EXAMPLE.COM",
                            NormalizedUserName = "GRACE.IKE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIFeanQWSkFg1krKx4+TBKr6lsfTdSu+AQCDYNktOM092yZC2bfwDeWsZNifWBOcjg==",
                            PhoneNumber = "7890123456",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "85eee421-4ef9-4294-bc18-7ee850ad705c",
                            TwoFactorEnabled = false,
                            UserName = "grace.ike@example.com",
                            AddressId = 3,
                            Certifications = "Electrical Engineer",
                            CurrentRole = "Fixer",
                            ExperienceYears = 4,
                            ImgUrl = "",
                            IsAvailable = true,
                            IsVerified = true,
                            Location = "Portharcourt",
                            Portfolio = "portfolio7.pdf",
                            Rate = 38.0m,
                            RateType = "Per Hour",
                            Rating = 4.7000000000000002,
                            Reviews = "Quick and efficient",
                            SpecializationId = 2,
                            VerificationDocument = "doc9.pdf"
                        },
                        new
                        {
                            Id = "fixer8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8f3b26a7-fa86-4856-8d77-7810e11c29a1",
                            Email = "henry.okoro@example.com",
                            EmailConfirmed = true,
                            FirstName = "Henry",
                            LastName = "Okoro",
                            LockoutEnabled = false,
                            MiddleName = "",
                            NormalizedEmail = "HENRY.OKORO@EXAMPLE.COM",
                            NormalizedUserName = "HENRY.OKORO@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAljWZr2TOGTDe70AUCMO2cK9XBuRLBQtjpiAUSSxIw59uKxFukEFNsxXqbdv6lqOw==",
                            PhoneNumber = "8901234567",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "9abbc2e4-9d7f-4b20-9833-9a65b5478a75",
                            TwoFactorEnabled = false,
                            UserName = "henry.okoro@example.com",
                            AddressId = 4,
                            Certifications = "Certified Electrician",
                            CurrentRole = "Fixer",
                            ExperienceYears = 7,
                            ImgUrl = "",
                            IsAvailable = true,
                            IsVerified = true,
                            Location = "Eleme",
                            Portfolio = "portfolio8.pdf",
                            Rate = 41.0m,
                            RateType = "Per Hour",
                            Rating = 4.5999999999999996,
                            Reviews = "Good communication",
                            SpecializationId = 2,
                            VerificationDocument = "doc10.pdf"
                        },
                        new
                        {
                            Id = "fixer9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a8fff910-59d6-4746-a60d-21f9d33af7e1",
                            Email = "ifeanyi.nwosu@example.com",
                            EmailConfirmed = true,
                            FirstName = "Ifeanyi",
                            LastName = "Nwosu",
                            LockoutEnabled = false,
                            MiddleName = "",
                            NormalizedEmail = "IFEANYI.NWOSU@EXAMPLE.COM",
                            NormalizedUserName = "IFEANYI.NWOSU@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDA9i7r2bJAEEqvWT4y+s7S9UyIXtQhrS7BdlTFRhf6TSBEp6OSKVAImH8zVbBUQWg==",
                            PhoneNumber = "9012345678",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "5c450d31-8be0-42a7-ae0a-e5cccc46f058",
                            TwoFactorEnabled = false,
                            UserName = "ifeanyi.nwosu@example.com",
                            AddressId = 5,
                            Certifications = "Licensed Plumber",
                            CurrentRole = "Fixer",
                            ExperienceYears = 8,
                            ImgUrl = "",
                            IsAvailable = true,
                            IsVerified = true,
                            Location = "Eleme",
                            Portfolio = "portfolio9.pdf",
                            Rate = 47.0m,
                            RateType = "Per Hour",
                            Rating = 4.4000000000000004,
                            Reviews = "Very neat work",
                            SpecializationId = 1,
                            VerificationDocument = "doc11.pdf"
                        },
                        new
                        {
                            Id = "fixer10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9aced496-d929-4551-8ad4-c4fb240f359a",
                            Email = "janet.opara@example.com",
                            EmailConfirmed = true,
                            FirstName = "Janet",
                            LastName = "Opara",
                            LockoutEnabled = false,
                            MiddleName = "",
                            NormalizedEmail = "JANET.OPARA@EXAMPLE.COM",
                            NormalizedUserName = "JANET.OPARA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFwky2IMCQWIe6OXr1/IhDf9jkre4kdZF3oXPGVm6Oxf/Mt1qeHfmmS2otqzM2h1Pg==",
                            PhoneNumber = "9123456780",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "853662ab-d443-485a-88d4-583b4876e063",
                            TwoFactorEnabled = false,
                            UserName = "janet.opara@example.com",
                            AddressId = 6,
                            Certifications = "Certified Plumber",
                            CurrentRole = "Fixer",
                            ExperienceYears = 6,
                            ImgUrl = "",
                            IsAvailable = true,
                            IsVerified = true,
                            Location = "Eleme",
                            Portfolio = "portfolio10.pdf",
                            Rate = 44.0m,
                            RateType = "Per Hour",
                            Rating = 4.2999999999999998,
                            Reviews = "Prompt and polite",
                            SpecializationId = 1,
                            VerificationDocument = "doc12.pdf"
                        },
                        new
                        {
                            Id = "fixer11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0b6a2afb-e38d-4c36-8618-c361aaa4de64",
                            Email = "kingsley.eze@example.com",
                            EmailConfirmed = true,
                            FirstName = "Kingsley",
                            LastName = "Eze",
                            LockoutEnabled = false,
                            MiddleName = "",
                            NormalizedEmail = "KINGSLEY.EZE@EXAMPLE.COM",
                            NormalizedUserName = "KINGSLEY.EZE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBi6ozXZOEGLttV4cLKzgMh1hsPJ8JCx11T+pmsbeYOKgU7POLxqsI7zhYm6IEbCRQ==",
                            PhoneNumber = "9234567801",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "dc9d1b9d-9ecb-4afe-862a-2795891538ad",
                            TwoFactorEnabled = false,
                            UserName = "kingsley.eze@example.com",
                            AddressId = 7,
                            Certifications = "Master Plumber",
                            CurrentRole = "Fixer",
                            ExperienceYears = 12,
                            ImgUrl = "",
                            IsAvailable = true,
                            IsVerified = true,
                            Location = "Portharcourt",
                            Portfolio = "portfolio11.pdf",
                            Rate = 52.0m,
                            RateType = "Per Hour",
                            Rating = 4.5999999999999996,
                            Reviews = "Highly recommended",
                            SpecializationId = 1,
                            VerificationDocument = "doc13.pdf"
                        },
                        new
                        {
                            Id = "fixer12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ff6ea50d-3c33-420b-a084-3d4350b2eeab",
                            Email = "linda.george@example.com",
                            EmailConfirmed = true,
                            FirstName = "Linda",
                            LastName = "George",
                            LockoutEnabled = false,
                            MiddleName = "",
                            NormalizedEmail = "LINDA.GEORGE@EXAMPLE.COM",
                            NormalizedUserName = "LINDA.GEORGE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELkAbrmBJRLwVdTYsVAmcTAwXTncSVUHLklAukmTKJWxSGfp4Bw+9G1awkUYqqJNyA==",
                            PhoneNumber = "9345678012",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "7cdb1681-2855-4c1c-a12a-debb2586b80d",
                            TwoFactorEnabled = false,
                            UserName = "linda.george@example.com",
                            AddressId = 1,
                            Certifications = "Masonry Expert",
                            CurrentRole = "Fixer",
                            ExperienceYears = 9,
                            ImgUrl = "",
                            IsAvailable = true,
                            IsVerified = true,
                            Location = "Portharcourt",
                            Portfolio = "portfolio12.pdf",
                            Rate = 46.0m,
                            RateType = "Per Hour",
                            Rating = 4.5,
                            Reviews = "Solid work",
                            SpecializationId = 3,
                            VerificationDocument = "doc14.pdf"
                        },
                        new
                        {
                            Id = "fixer13",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b733fc40-b838-4976-8a53-600dd0310d9c",
                            Email = "michael.ibrahim@example.com",
                            EmailConfirmed = true,
                            FirstName = "Michael",
                            LastName = "Ibrahim",
                            LockoutEnabled = false,
                            MiddleName = "",
                            NormalizedEmail = "MICHAEL.IBRAHIM@EXAMPLE.COM",
                            NormalizedUserName = "MICHAEL.IBRAHIM@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMGVu5YOt3cRVqFxdAByO95+YtBp+F/FKZaCI99XOcZXRKBnz6u0c3vAKzFVXljq2w==",
                            PhoneNumber = "9456780123",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "d48bbc71-d10e-4908-bf98-1599ef194999",
                            TwoFactorEnabled = false,
                            UserName = "michael.ibrahim@example.com",
                            AddressId = 2,
                            Certifications = "Certified Mason",
                            CurrentRole = "Fixer",
                            ExperienceYears = 7,
                            ImgUrl = "",
                            IsAvailable = true,
                            IsVerified = true,
                            Location = "Portharcourt",
                            Portfolio = "portfolio13.pdf",
                            Rate = 44.0m,
                            RateType = "Per Hour",
                            Rating = 4.5999999999999996,
                            Reviews = "Very creative",
                            SpecializationId = 3,
                            VerificationDocument = "doc15.pdf"
                        },
                        new
                        {
                            Id = "fixer14",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ee54a15c-cab3-4f7a-bd5c-f0a1eb153a70",
                            Email = "ngozi.okafor@example.com",
                            EmailConfirmed = true,
                            FirstName = "Ngozi",
                            LastName = "Okafor",
                            LockoutEnabled = false,
                            MiddleName = "",
                            NormalizedEmail = "NGOZI.OKAFOR@EXAMPLE.COM",
                            NormalizedUserName = "NGOZI.OKAFOR@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOOWv5VmbaLrbJdhPuOn3EQZFNEg3XwrqL0os7XXKBeegxr8dEiz9YQUIxk0q/tnlw==",
                            PhoneNumber = "9567801234",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "85025c35-36d8-4fd1-b3e3-a2267f08f9bf",
                            TwoFactorEnabled = false,
                            UserName = "ngozi.okafor@example.com",
                            AddressId = 4,
                            Certifications = "Masonry Specialist",
                            CurrentRole = "Fixer",
                            ExperienceYears = 6,
                            ImgUrl = "",
                            IsAvailable = true,
                            IsVerified = true,
                            Location = "Eleme",
                            Portfolio = "portfolio14.pdf",
                            Rate = 43.0m,
                            RateType = "Per Hour",
                            Rating = 4.4000000000000004,
                            Reviews = "Dependable",
                            SpecializationId = 3,
                            VerificationDocument = "doc16.pdf"
                        },
                        new
                        {
                            Id = "fixer15",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c137752e-a989-47f1-add0-1608894402f0",
                            Email = "olu.adebayo@example.com",
                            EmailConfirmed = true,
                            FirstName = "Olu",
                            LastName = "Adebayo",
                            LockoutEnabled = false,
                            MiddleName = "",
                            NormalizedEmail = "OLU.ADEBAYO@EXAMPLE.COM",
                            NormalizedUserName = "OLU.ADEBAYO@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEF/zsYAsP6zlPXRzaHJNuNaXZ+gtn+hwHXrvK7+EPcKW+35+0ycrgHroJbIs70wmug==",
                            PhoneNumber = "9678012345",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "e057fd43-1a80-4e8a-9101-7d50d7046aa0",
                            TwoFactorEnabled = false,
                            UserName = "olu.adebayo@example.com",
                            AddressId = 5,
                            Certifications = "Expert Tiler",
                            CurrentRole = "Fixer",
                            ExperienceYears = 8,
                            ImgUrl = "",
                            IsAvailable = true,
                            IsVerified = true,
                            Location = "Eleme",
                            Portfolio = "portfolio15.pdf",
                            Rate = 44.0m,
                            RateType = "Per Hour",
                            Rating = 4.7000000000000002,
                            Reviews = "Very neat finish",
                            SpecializationId = 4,
                            VerificationDocument = "doc17.pdf"
                        },
                        new
                        {
                            Id = "fixer16",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6893752e-b4e6-4382-8b5e-314e892d9077",
                            Email = "patience.uche@example.com",
                            EmailConfirmed = true,
                            FirstName = "Patience",
                            LastName = "Uche",
                            LockoutEnabled = false,
                            MiddleName = "",
                            NormalizedEmail = "PATIENCE.UCHE@EXAMPLE.COM",
                            NormalizedUserName = "PATIENCE.UCHE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFx4TueA/6xZORBPJNw6kHDFNxKzeqXG9OaY4rbOQmVYM8k9sbDBxOIVDQanUPPmkQ==",
                            PhoneNumber = "9780123456",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "beaa7b8a-1bf9-4aaa-af46-0abaa805ebdc",
                            TwoFactorEnabled = false,
                            UserName = "patience.uche@example.com",
                            AddressId = 6,
                            Certifications = "Certified Tiler",
                            CurrentRole = "Fixer",
                            ExperienceYears = 7,
                            ImgUrl = "",
                            IsAvailable = true,
                            IsVerified = true,
                            Location = "Eleme",
                            Portfolio = "portfolio16.pdf",
                            Rate = 43.0m,
                            RateType = "Per Hour",
                            Rating = 4.5,
                            Reviews = "Great attention to detail",
                            SpecializationId = 4,
                            VerificationDocument = "doc18.pdf"
                        },
                        new
                        {
                            Id = "fixer17",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d6014fe9-7af5-412f-98d2-535a29a0e4e6",
                            Email = "samuel.iroegbu@example.com",
                            EmailConfirmed = true,
                            FirstName = "Samuel",
                            LastName = "Iroegbu",
                            LockoutEnabled = false,
                            MiddleName = "",
                            NormalizedEmail = "SAMUEL.IROEGBU@EXAMPLE.COM",
                            NormalizedUserName = "SAMUEL.IROEGBU@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPg1Y9h+xh/MUdTlz9oqda/gtY7CY8q5xo7mAGUleH3I0a0Zh+ociyAvNM+bLfWRGQ==",
                            PhoneNumber = "9891234567",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "8bebc1aa-e7e5-44ab-b744-1a28b27029a3",
                            TwoFactorEnabled = false,
                            UserName = "samuel.iroegbu@example.com",
                            AddressId = 7,
                            Certifications = "Tiling Specialist",
                            CurrentRole = "Fixer",
                            ExperienceYears = 5,
                            ImgUrl = "",
                            IsAvailable = true,
                            IsVerified = true,
                            Location = "Portharcourt",
                            Portfolio = "portfolio17.pdf",
                            Rate = 41.0m,
                            RateType = "Per Hour",
                            Rating = 4.5999999999999996,
                            Reviews = "Fast and reliable",
                            SpecializationId = 4,
                            VerificationDocument = "doc19.pdf"
                        },
                        new
                        {
                            Id = "fixer18",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cc7b7848-4cae-4ad8-a062-bd63fc7ace92",
                            Email = "tunde.salami@example.com",
                            EmailConfirmed = true,
                            FirstName = "Tunde",
                            LastName = "Salami",
                            LockoutEnabled = false,
                            MiddleName = "",
                            NormalizedEmail = "TUNDE.SALAMI@EXAMPLE.COM",
                            NormalizedUserName = "TUNDE.SALAMI@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEB/Oq1s1KUs5sVP5ro+FGrdh+uE1+jrb4mRYBH+DfN91ENwIA/f3gATs5Bp+ZznYjA==",
                            PhoneNumber = "9901234567",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "e72805fa-82f0-4c9f-9b9d-886423f81ff5",
                            TwoFactorEnabled = false,
                            UserName = "tunde.salami@example.com",
                            AddressId = 1,
                            Certifications = "Expert Screeder",
                            CurrentRole = "Fixer",
                            ExperienceYears = 9,
                            ImgUrl = "",
                            IsAvailable = true,
                            IsVerified = true,
                            Location = "Portharcourt",
                            Portfolio = "portfolio18.pdf",
                            Rate = 47.0m,
                            RateType = "Per Hour",
                            Rating = 4.7999999999999998,
                            Reviews = "Smooth finish",
                            SpecializationId = 5,
                            VerificationDocument = "doc20.pdf"
                        },
                        new
                        {
                            Id = "fixer19",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ef807cb2-2231-48f7-a57d-9b1e4a99303b",
                            Email = "uche.nwachukwu@example.com",
                            EmailConfirmed = true,
                            FirstName = "Uche",
                            LastName = "Nwachukwu",
                            LockoutEnabled = false,
                            MiddleName = "",
                            NormalizedEmail = "UCHE.NWACHUKWU@EXAMPLE.COM",
                            NormalizedUserName = "UCHE.NWACHUKWU@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMIrIgsapG4l5Xx1ufT13jFrEz+gbFWOu8hfj3xnpy4QzdKJ+wpR/2Mp61s9i6b6XQ==",
                            PhoneNumber = "9012345671",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "5491cda5-cbd9-4207-a5f8-98c13c72c437",
                            TwoFactorEnabled = false,
                            UserName = "uche.nwachukwu@example.com",
                            AddressId = 2,
                            Certifications = "Certified Screeder",
                            CurrentRole = "Fixer",
                            ExperienceYears = 8,
                            ImgUrl = "",
                            IsAvailable = true,
                            IsVerified = true,
                            Location = "Portharcourt",
                            Portfolio = "portfolio19.pdf",
                            Rate = 46.0m,
                            RateType = "Per Hour",
                            Rating = 4.7000000000000002,
                            Reviews = "Very professional",
                            SpecializationId = 5,
                            VerificationDocument = "doc21.pdf"
                        },
                        new
                        {
                            Id = "fixer20",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "08b13ecd-afba-4ca5-b93d-e4a5706562ef",
                            Email = "victoria.okeke@example.com",
                            EmailConfirmed = true,
                            FirstName = "Victoria",
                            LastName = "Okeke",
                            LockoutEnabled = false,
                            MiddleName = "",
                            NormalizedEmail = "VICTORIA.OKEKE@EXAMPLE.COM",
                            NormalizedUserName = "VICTORIA.OKEKE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEzl0KKwW+9/t1pCLpn1DYoRUx/9WJCK5PREzhrXzSAN5CtxRrbm1WxKRZdSF2gkEQ==",
                            PhoneNumber = "9123456712",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "6bf2741d-121a-41fd-bbfa-a76df0681448",
                            TwoFactorEnabled = false,
                            UserName = "victoria.okeke@example.com",
                            AddressId = 3,
                            Certifications = "Screeding Specialist",
                            CurrentRole = "Fixer",
                            ExperienceYears = 6,
                            ImgUrl = "",
                            IsAvailable = true,
                            IsVerified = true,
                            Location = "Portharcourt",
                            Portfolio = "portfolio20.pdf",
                            Rate = 45.0m,
                            RateType = "Per Hour",
                            Rating = 4.5999999999999996,
                            Reviews = "Great attention to detail",
                            SpecializationId = 5,
                            VerificationDocument = "doc22.pdf"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("QuickProFixer.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("QuickProFixer.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuickProFixer.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("QuickProFixer.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuickProFixer.Models.Booking", b =>
                {
                    b.HasOne("QuickProFixer.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickProFixer.Models.Fixer", "Fixer")
                        .WithMany()
                        .HasForeignKey("FixerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickProFixer.Models.Quote", "Quote")
                        .WithMany()
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Fixer");

                    b.Navigation("Quote");
                });

            modelBuilder.Entity("QuickProFixer.Models.ClientRating", b =>
                {
                    b.HasOne("QuickProFixer.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuickProFixer.Models.Fixer", "Fixer")
                        .WithMany("ClientRatings")
                        .HasForeignKey("FixerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Fixer");
                });

            modelBuilder.Entity("QuickProFixer.Models.FixRequest", b =>
                {
                    b.HasOne("QuickProFixer.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickProFixer.Models.Fixer", "Fixer")
                        .WithMany()
                        .HasForeignKey("FixerId");

                    b.HasOne("QuickProFixer.Models.Service", "Specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickProFixer.Models.SupportingFile", "SupportingDocument")
                        .WithMany()
                        .HasForeignKey("SupportingDocumentId");

                    b.HasOne("QuickProFixer.Models.SupportingFile", "SupportingImage")
                        .WithMany()
                        .HasForeignKey("SupportingImageId");

                    b.Navigation("Address");

                    b.Navigation("Fixer");

                    b.Navigation("Specialization");

                    b.Navigation("SupportingDocument");

                    b.Navigation("SupportingImage");
                });

            modelBuilder.Entity("QuickProFixer.Models.FixerRating", b =>
                {
                    b.HasOne("QuickProFixer.Models.Client", "Client")
                        .WithMany("FixerRatings")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickProFixer.Models.Fixer", "Fixer")
                        .WithMany()
                        .HasForeignKey("FixerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Fixer");
                });

            modelBuilder.Entity("QuickProFixer.Models.Invoice", b =>
                {
                    b.HasOne("QuickProFixer.Models.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuickProFixer.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickProFixer.Models.Fixer", "Fixer")
                        .WithMany()
                        .HasForeignKey("FixerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Client");

                    b.Navigation("Fixer");
                });

            modelBuilder.Entity("QuickProFixer.Models.Payment", b =>
                {
                    b.HasOne("QuickProFixer.Models.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuickProFixer.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickProFixer.Models.Fixer", "Fixer")
                        .WithMany()
                        .HasForeignKey("FixerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Client");

                    b.Navigation("Fixer");
                });

            modelBuilder.Entity("QuickProFixer.Models.Quote", b =>
                {
                    b.HasOne("QuickProFixer.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickProFixer.Models.FixRequest", "FixRequest")
                        .WithMany()
                        .HasForeignKey("FixRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuickProFixer.Models.Fixer", "Fixer")
                        .WithMany()
                        .HasForeignKey("FixerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickProFixer.Models.SupportingFile", "SupportingDocument")
                        .WithMany()
                        .HasForeignKey("SupportingDocumentId");

                    b.HasOne("QuickProFixer.Models.SupportingFile", "SupportingImage")
                        .WithMany()
                        .HasForeignKey("SupportingImageId");

                    b.Navigation("Client");

                    b.Navigation("FixRequest");

                    b.Navigation("Fixer");

                    b.Navigation("SupportingDocument");

                    b.Navigation("SupportingImage");
                });

            modelBuilder.Entity("QuickProFixer.Models.QuoteItem", b =>
                {
                    b.HasOne("QuickProFixer.Models.Quote", "Quote")
                        .WithMany("Items")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quote");
                });

            modelBuilder.Entity("QuickProFixer.Models.Client", b =>
                {
                    b.HasOne("QuickProFixer.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickProFixer.Models.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("QuickProFixer.Models.Client", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("QuickProFixer.Models.Fixer", b =>
                {
                    b.HasOne("QuickProFixer.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickProFixer.Models.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("QuickProFixer.Models.Fixer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuickProFixer.Models.Service", "Specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("QuickProFixer.Models.Quote", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("QuickProFixer.Models.Client", b =>
                {
                    b.Navigation("FixerRatings");
                });

            modelBuilder.Entity("QuickProFixer.Models.Fixer", b =>
                {
                    b.Navigation("ClientRatings");
                });
#pragma warning restore 612, 618
        }
    }
}
